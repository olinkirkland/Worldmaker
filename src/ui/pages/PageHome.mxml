<?xml version="1.0"?>
<pages:Page xmlns:fx="http://ns.adobe.com/mxml/2009"
            xmlns:s="library://ns.adobe.com/flex/spark"
            xmlns:pages="ui.pages.*"
            xmlns:ui="ui.components.*"
            creationComplete="onCreationComplete(event)">

    <fx:Script><![CDATA[
        import data.EngineData;
        import data.EngineManager;
        import data.NewsData;
        import data.NewsManager;
        import data.PopupManager;
        import data.ProjectData;
        import data.ProjectManager;

        import events.PayloadEvent;

        import global.Color;

        import global.Icons;
        import global.Util;

        import mx.collections.ArrayCollection;

        import mx.collections.ArrayCollection;

        import mx.events.FlexEvent;

        import spark.collections.Sort;
        import spark.collections.SortField;
        import spark.events.IndexChangeEvent;

        import ui.itemRenderers.ItemRendererCarouselButton;

        import ui.popups.PopupInfoWithCheckBox;
        import ui.popups.PopupNews;

        private var recentProject:ProjectData;
        private var recentEngine:EngineData;

        private function onCreationComplete(event:FlexEvent):void
        {
            validateRecentProject();

            var news:ArrayCollection = new ArrayCollection(NewsManager.instance.news);
            var sortByDate:Sort = new Sort();
            sortByDate.fields = [new SortField("date", true)];
            news.sort = sortByDate;
            news.refresh();
            listAllNews.dataProvider = news;

            var arr:Array = [];
            var i:int = 0;
            while (arr.length < 3 && i < news.length)
            {
                arr.push(news[i]);
                i++;
            }

            listCarousel.dataProvider = new ArrayCollection(arr);
            listCarousel.addEventListener(ItemRendererCarouselButton.SELECTED_CAROUSEL_BUTTON, onSelectedCarouselButton);

            Util.timer.addEventListener(TimerEvent.TIMER, onTimer, false, 0, true);

            // todo
            //if (SettingsManager.instance.)

            var p:PopupInfoWithCheckBox = new PopupInfoWithCheckBox();
            p.width = 320;
            p.header = "Welcome to Worldmaker!";
            p.description = "There's lots of worlds to imagine, so let's get started. What will you make?";
            p.callbackWithCheckBox = turnOffWelcomeScreen;
            p.textCheckBox = "Don't show me this again.";
            p.textConfirm = "I'm ready!";
            p.checkBoxInitiallySelected = true;
            //PopupManager.open(p);

            listCarousel.selectedIndex = 0;
            validateCarousel();
            //callLater(validateCarousel);
        }

        private function onSelectedCarouselButton(event:PayloadEvent):void
        {
            listCarousel.selectedItem = event.payload;
        }

        private function turnOffWelcomeScreen():void
        {
            // todo
        }

        private function onEngineAction(event:Event):void
        {
            setTimeout(function ():void
            {
                validateEngine();
            }, 500);
        }

        private function validateEngine():void
        {
            var engineData:EngineData = EngineManager.instance.getEngineByVersion(recentProject.engine);
            buttonOpen.enabled = engineData.installDirectory.exists;
        }

        override public function open():void
        {
            super.open();
            validateRecentProject();
        }

        private function validateRecentProject():void
        {
            if (recentEngine)
            {
                recentEngine.removeEventListener(EngineData.CONTENT_READY, onEngineAction);
                recentEngine.removeEventListener(EngineData.UNINSTALL, onEngineAction);
            }

            recentProject = null;
            recentEngine = null;
            for each (var project:ProjectData in ProjectManager.instance.projects.source)
                if (!recentProject || project.dateModified > recentProject.dateModified)
                    recentProject = project;

            panelRecentProject.visible = panelRecentProject.includeInLayout = recentProject;
            if (!recentProject)
                return;

            recentEngine = EngineManager.instance.getEngineByVersion(recentProject.engine);
            recentEngine.addEventListener(EngineData.CONTENT_READY, onEngineAction);
            recentEngine.addEventListener(EngineData.UNINSTALL, onEngineAction);

            labelRecentProjectName.text = recentProject.name;
            updateRelativeDateLabels();
        }

        private function onClickOpen(event:MouseEvent):void
        {
            ProjectManager.instance.launch(recentProject);
        }

        private function onTimer(event:TimerEvent):void
        {
            updateRelativeDateLabels();
        }

        private function updateRelativeDateLabels():void
        {
            if (recentProject)
                labelRecentProjectDateModified.text = "Modified " + Util.toRelativeDate(recentProject.dateModified);
        }

        private function onChangeCarousel(event:IndexChangeEvent):void
        {
            validateCarousel();
        }

        private function validateCarousel():void
        {
            var newsData:NewsData = listCarousel.selectedItem;
            imageCarousel.source = newsData.getImage();
            labelCarouselTitle.text = newsData.title;
            labelCarouselBlurb.text = newsData.getText();
        }

        private function onClickOpenNews(event:MouseEvent):void
        {
            var p:PopupNews = new PopupNews();
            p.newsData = listCarousel.selectedItem;
            PopupManager.open(p);
        }
        ]]></fx:Script>

    <s:VGroup width="100%"
              height="100%"
              gap="15">
        <s:Label styleName="pageTitle"
                 text="Home"/>
        <s:HGroup width="100%"
                  height="100%"
                  gap="15">
            <!--Recent News Carousel-->
            <s:Group width="100%"
                     height="100%">
                <s:Image id="imageCarousel"
                         width="100%"
                         height="100%"
                         horizontalAlign="center"
                         verticalAlign="top"
                         fillMode="scale"
                         scaleMode="zoom"/>
                <s:VGroup width="100%"
                          height="100%"
                          gap="15">
                    <s:VGroup width="100%"
                              height="100%"
                              gap="10"
                              padding="25"
                              verticalAlign="bottom">
                        <s:Group>
                            <s:Rect width="100%"
                                    height="100%">
                                <s:fill>
                                    <s:SolidColor color="{Color.black}"
                                                  alpha=".8"/>
                                </s:fill>
                            </s:Rect>
                            <s:VGroup padding="15"
                                      gap="15">
                                <s:Label id="labelCarouselTitle"
                                         styleName="header"/>
                                <s:Label id="labelCarouselBlurb"
                                         maxWidth="320"
                                         color="{Color.textHigh}"
                                         maxDisplayedLines="3"/>
                                <s:HGroup width="100%"
                                          verticalAlign="middle">
                                    <s:List id="listCarousel"
                                            requireSelection="true"
                                            borderVisible="false"
                                            contentBackgroundAlpha="0"
                                            itemRenderer="ui.itemRenderers.ItemRendererCarouselButton"
                                            change="onChangeCarousel(event)">
                                        <s:layout>
                                            <s:HorizontalLayout gap="5"/>
                                        </s:layout>
                                    </s:List>

                                    <s:Spacer width="100%"/>
                                    <s:Button icon="{Icons.Page}"
                                              label="Read"
                                              skinClass="ui.skins.ButtonTextSkin"
                                              click="onClickOpenNews(event)"/>
                                </s:HGroup>
                            </s:VGroup>
                        </s:Group>
                    </s:VGroup>
                </s:VGroup>
            </s:Group>

            <!--All News & Most Recent Project-->
            <s:VGroup width="320"
                      height="100%"
                      gap="15">
                <s:List id="listAllNews"
                        useVirtualLayout="false"
                        width="100%"
                        height="100%"
                        contentBackgroundAlpha="0"
                        borderVisible="false"
                        horizontalScrollPolicy="off"
                        itemRenderer="ui.itemRenderers.news.ItemRendererNews"/>

                <s:Panel id="panelRecentProject"
                         width="100%"
                         skinClass="ui.skins.PanelSkinOutline">
                    <s:HGroup width="100%"
                              verticalAlign="bottom"
                              padding="15">

                        <s:VGroup width="100%"
                                  gap="10">
                            <s:Label width="100%"
                                     text="Open your most recent World."
                                     color="{Color.textLow}"/>

                            <s:Spacer height="0"/>

                            <s:Label id="labelRecentProjectName"
                                     maxWidth="240"
                                     maxDisplayedLines="1"
                                     showTruncationTip="true"
                                     styleName="header"/>

                            <s:Label id="labelRecentProjectDateModified"
                                     width="100%"/>
                        </s:VGroup>

                        <s:Button id="buttonOpen"
                                  skinClass="ui.skins.ButtonThemeSkin"
                                  icon="{Icons.Pen}"
                                  label="Open"
                                  click="onClickOpen(event)"/>
                    </s:HGroup>

                </s:Panel>
            </s:VGroup>

        </s:HGroup>
    </s:VGroup>
</pages:Page>
