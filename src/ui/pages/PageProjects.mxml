<?xml version="1.0"?>
<pages:Page xmlns:fx="http://ns.adobe.com/mxml/2009"
            xmlns:s="library://ns.adobe.com/flex/spark"
            xmlns:pages="ui.pages.*"
            xmlns:ui="ui.components.*"
            creationComplete="onCreationComplete(event)">

    <fx:Script><![CDATA[
        import data.EngineData;
        import data.PopupManager;
        import data.ProjectData;
        import data.ProjectManager;
        import data.ProjectSort;

        import global.Color;
        import global.Icons;
        import global.Images;

        import mx.collections.ArrayCollection;
        import mx.events.CollectionEvent;
        import mx.events.FlexEvent;

        import spark.collections.Sort;

        import spark.events.IndexChangeEvent;

        import spark.events.TextOperationEvent;

        import ui.popups.PopupCreateProject;
        import ui.popups.PopupImportProject;

        private function onCreationComplete(event:FlexEvent):void
        {
            listProjects.dataProvider = ProjectManager.instance.projects;

            dropDownListSort.dataProvider = new ArrayCollection([
                {sort: ProjectSort.byName, text: "By Name"},
                {sort: ProjectSort.byCreated, text: "By Recently Created"},
                {sort: ProjectSort.byModified, text: "By Recently Modified"}]);

            ProjectManager.instance.projects.addEventListener(CollectionEvent.COLLECTION_CHANGE, onChangeListProjects);
            ProjectManager.instance.projects.filterFunction = filterBySearch;
            validateProjects();
        }

        override public function open():void
        {
            super.open();
            validateProjects();
        }

        private function onCreateProject(event:MouseEvent):void
        {
            var p:PopupCreateProject = new PopupCreateProject();
            p.callbackConfirm = createProject;
            PopupManager.open(p);
        }

        private function onImportProject(event:MouseEvent):void
        {
            var p:PopupImportProject = new PopupImportProject();
            p.callbackConfirm = validateSort;
            PopupManager.open(p);
        }

        private function createProject(p:PopupCreateProject):void
        {
            var selectedName:String = p.selectedName;
            var selectedEngine:EngineData = p.selectedEngine;

            var projectData:ProjectData = new ProjectData();
            projectData.file = File.applicationStorageDirectory.resolvePath("projects").resolvePath(selectedName + ".json");
            projectData.name = selectedName;
            projectData.dateCreated = new Date().time;
            projectData.dateModified = projectData.dateCreated;
            projectData.engine = selectedEngine.version;
            projectData.content = {};

            ProjectManager.instance.addProject(projectData);
            validateSort();
        }

        private function onChangeListProjects(event:Event):void
        {
            validateProjects();
        }

        private function validateProjects():void
        {
            labelMyProjects.text = "My Worlds (" + ProjectManager.instance.projects.length + "/" + ProjectManager.instance.projects.source.length + ")";
            groupNoMatch.visible = ProjectManager.instance.projects.length == 0 && ProjectManager.instance.projects.source.length > 0;
            groupNoProjects.visible = ProjectManager.instance.projects.source.length == 0;
        }

        private function onInputSearchChange(event:TextOperationEvent):void
        {
            ProjectManager.instance.projects.refresh();
        }

        private function filterBySearch(projectData:ProjectData):Boolean
        {
            return inputSearch.text.length == 0 || projectData.name.toLowerCase().indexOf(inputSearch.text.toLowerCase()) >= 0;
        }

        private function onDropDownListSortChanged(event:IndexChangeEvent):void
        {
            validateSort();
        }

        private function validateSort():void
        {
            ProjectManager.instance.projects.sort = dropDownListSort.selectedItem.sort;
            ProjectManager.instance.projects.refresh();
        }
        ]]></fx:Script>

    <s:VGroup width="100%"
              height="100%"
              gap="15">
        <s:Label styleName="pageTitle"
                 text="Worlds"/>
        <s:HGroup width="100%"
                  height="100%"
                  gap="15">
            <s:VGroup width="240"
                      height="100%"
                      gap="15">
                <s:Panel skinClass="ui.skins.PanelSkinOutline"
                         width="100%">
                    <s:VGroup width="100%">
                        <s:Label width="100%"
                                 text="This is where you manage your Worlds. You can create new Worlds or import them from local storage."/>
                    </s:VGroup>
                </s:Panel>
                <s:Panel width="100%"
                         skinClass="ui.skins.PanelSkinPageSection">
                    <s:VGroup width="100%"
                              height="100%"
                              padding="10"
                              gap="5"
                              horizontalAlign="center">
                        <s:Label text="Start a new World"/>
                        <s:Spacer height="5"/>
                        <s:Button label="Create World"
                                  skinClass="ui.skins.ButtonThemeSkin"
                                  icon="{Icons.Add}"
                                  click="onCreateProject(event)"/>
                        <s:Button label="Import World"
                                  click="onImportProject(event)"/>
                    </s:VGroup>
                </s:Panel>
            </s:VGroup>

            <s:Panel width="100%"
                     height="100%"
                     skinClass="ui.skins.PanelSkinPageSection">
                <s:VGroup width="100%"
                          height="100%"
                          padding="10"
                          gap="10">

                    <s:Panel skinClass="ui.skins.PanelSkinOutline"
                             width="100%">
                        <s:HGroup width="100%"
                                  padding="0"
                                  verticalAlign="middle">
                            <s:Label id="labelMyProjects"/>
                            <s:Spacer width="100%"/>
                            <ui:ColorBitmapImage source="{Icons.Sort}"
                                                 color="{Color.textMedium}"/>
                            <s:DropDownList id="dropDownListSort"
                                            labelField="text"
                                            requireSelection="true"
                                            change="onDropDownListSortChanged(event)"/>
                            <ui:IconTextInput id="inputSearch"
                                              icon="{Icons.Search}"
                                              change="onInputSearchChange(event)"
                                              width="240"/>
                        </s:HGroup>
                    </s:Panel>

                    <s:Group width="100%"
                             height="100%">
                        <s:List id="listProjects"
                                useVirtualLayout="false"
                                width="100%"
                                height="100%"
                                contentBackgroundAlpha="0"
                                borderVisible="false"
                                horizontalScrollPolicy="off"
                                itemRenderer="ui.itemRenderers.ItemRendererProject">
                            <s:layout>
                                <s:TileLayout columnAlign="justifyUsingWidth"
                                              horizontalGap="10"
                                              verticalGap="10"/>
                            </s:layout>
                        </s:List>

                        <s:VGroup id="groupNoProjects"
                                  width="100%"
                                  height="100%"
                                  horizontalAlign="center"
                                  verticalAlign="middle">
                            <s:Panel>
                                <s:VGroup horizontalAlign="center"
                                          gap="15"
                                          padding="15">
                                    <s:Label text="You haven't created any Worlds."/>
                                    <s:Button label="Create World"
                                              skinClass="ui.skins.ButtonThemeSkin"
                                              click="onCreateProject(event)"/>
                                </s:VGroup>
                            </s:Panel>
                        </s:VGroup>

                        <s:VGroup id="groupNoMatch"
                                  width="100%"
                                  height="100%"
                                  horizontalAlign="center"
                                  verticalAlign="middle">
                            <s:Panel>
                                <s:VGroup horizontalAlign="center"
                                          gap="15"
                                          padding="15">
                                    <s:Label text="No Worlds match your search."/>
                                </s:VGroup>
                            </s:Panel>
                        </s:VGroup>

                    </s:Group>
                </s:VGroup>

            </s:Panel>
        </s:HGroup>

    </s:VGroup>

</pages:Page>
