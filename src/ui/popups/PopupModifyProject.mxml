<?xml version="1.0"?>
<popups:Popup xmlns:fx="http://ns.adobe.com/mxml/2009"
              xmlns:s="library://ns.adobe.com/flex/spark"
              xmlns:popups="ui.popups.*"
              xmlns:ui="ui.components.*"
              width="320">

    <fx:Script><![CDATA[
        import data.EngineData;
        import data.EngineManager;
        import data.ProjectData;
        import data.ProjectManager;

        import global.Color;
        import global.Icons;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;

        import spark.collections.Sort;
        import spark.collections.SortField;
        import spark.events.TextOperationEvent;

        public var callbackConfirm:Function = null;
        public var callbackDelete:Function = null;
        public var projectData:ProjectData;
        private var engines:ArrayCollection;
        private var sortByDate:Sort;

        override public function onCreationComplete(event:FlexEvent):void
        {
            super.onCreationComplete(event);

            sortByDate = new Sort();
            sortByDate.fields = [new SortField("date", true)];

            engines = new ArrayCollection(EngineManager.instance.engines);
            engines.sort = sortByDate;
            engines.refresh();

            listEngines.dataProvider = engines;

            inputName.text = projectData.name;
            for (var i:int = 0; i < engines.length; i++)
            {
                var engine:EngineData = EngineData(engines.getItemAt(i));
                if (engine.version == projectData.engine)
                    listEngines.selectedIndex = i;
            }

            validateName();
        }

        public function get selectedEngine():EngineData
        {
            return listEngines.selectedItem;
        }

        public function get selectedName():String
        {
            return inputName.text;
        }

        private function cancelAndClose(event:MouseEvent):void
        {
            close();
        }

        private function confirmAndClose(event:MouseEvent):void
        {
            close();
            if (callbackConfirm != null) callbackConfirm.apply(this, [this]);
        }

        private function onChangeEnginesFilter(event:Event):void
        {
            engines.filterFunction = checkBoxFilterByInstall.selected ? filterByInstall : null;
            engines.sort = sortByDate;
            engines.refresh();
        }

        private function filterByInstall(engineData:EngineData):Boolean
        {
            return engineData.installDirectory.exists;
        }

        private function validateName():void
        {
            var valid:Boolean = ProjectManager.instance.validateNewName(inputName.text, projectData.name);
            groupImageNameValidation.includeInLayout = groupImageNameValidation.visible = !valid;
            buttonConfirm.enabled = valid;
        }

        private function onChangeInputName(event:TextOperationEvent):void
        {
            validateName();
        }

        private function deleteAndClose(event:MouseEvent):void
        {
            close();
            callbackDelete.apply();
        }
        ]]>
    </fx:Script>

    <s:VGroup gap="15"
              width="100%">

        <s:Label text="Modify a Project"
                 width="100%"
                 styleName="header"/>

        <s:Panel skinClass="ui.skins.PanelSkinOutline"
                 width="100%">
            <s:VGroup width="100%"
                      height="100%"
                      gap="5">

                <s:Label text="Enter a Title for this Project"
                         width="100%"/>
                <s:HGroup width="100%"
                          gap="10"
                          verticalAlign="middle">
                    <ui:IconTextInput id="inputName"
                                      icon="{Icons.Edit}"
                                      width="100%"
                                      change="onChangeInputName(event)"/>
                    <s:Group id="groupImageNameValidation"
                             toolTip="Project names must be at least 1 character long and unique">
                        <ui:ColorBitmapImage id="imageNameValidation"
                                             width="16"
                                             height="16"
                                             source="{Icons.Error}"
                                             color="{Color.textHigh}"/>
                    </s:Group>
                </s:HGroup>

            </s:VGroup>

        </s:Panel>

        <s:Panel skinClass="ui.skins.PanelSkinOutline"
                 width="100%">
            <s:VGroup width="100%"
                      height="100%"
                      gap="10">

                <s:Label text="Choose a default Engine"
                         width="100%"/>

                <s:CheckBox id="checkBoxFilterByInstall"
                            label="Show only installed Engines"
                            change="onChangeEnginesFilter(event)"/>

                <s:List id="listEngines"
                        useVirtualLayout="false"
                        width="100%"
                        height="100%"
                        maxHeight="120"
                        contentBackgroundAlpha="0"
                        borderVisible="false"
                        horizontalScrollPolicy="off"
                        requireSelection="true"
                        allowMultipleSelection="false"
                        itemRenderer="ui.itemRenderers.ItemRendererEngineMini">
                    <s:layout>
                        <s:TileLayout columnAlign="justifyUsingWidth"
                                      requestedColumnCount="3"
                                      horizontalGap="5"
                                      verticalGap="5"/>
                    </s:layout>
                </s:List>

                <s:Label width="100%"
                         text="Projects can be opened with any Engine. The Engine specified here will be the default for this Project."/>

            </s:VGroup>
        </s:Panel>

        <s:Panel skinClass="ui.skins.PanelSkinOutline"
                 width="100%">
            <s:VGroup width="100%"
                      height="100%"
                      gap="10">

                <s:Label text="Delete this Project"
                         width="100%"/>
                <s:Button id="buttonDelete"
                          label="Delete"
                          click="deleteAndClose(event)"/>
            </s:VGroup>
        </s:Panel>

        <s:HGroup width="100%"
                  horizontalAlign="right"
                  top="5">
            <s:Button id="buttonCancel"
                      label="Cancel"
                      click="cancelAndClose(event)"/>
            <s:Button id="buttonConfirm"
                      label="Modify"
                      skinClass="ui.skins.ButtonThemeSkin"
                      click="confirmAndClose(event)"/>
        </s:HGroup>

    </s:VGroup>
</popups:Popup>
